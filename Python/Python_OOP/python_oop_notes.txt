============
| Packages |
============

A module is a single file (or files) that are imported under one import.
A package is a collection of modules in directories that give a package hierarchy.

from my_package.subdirectory import my_functions

Packages are namespaces which contain multiple packages and modules themselves.
They are simply directories, but with a twist.

sample_project
     |_____ python_file.py
     |_____ my_modules
               |_____ __init__.py
               |_____ test_module.py
               |_____ another_module.py
               |_____ third_module.py

In the above diagram, the package name is my_modules.

====================
| Writing Packages |
====================

Each package in Python is a directory which MUST contain a special file called  __init__.py.
This file can be empty, and it indicates that the directory containing it is a Python package,
so it can be imported the same way a module can be imported.

If we create a directory called my_modules, which marks the package name, we can then create
a module inside that package called test_module. We also must not forget to add the __init__.py
file inside the my_modules directory.

To use the module test_module, we can import it in two ways:

import my_modules.test_module

OR

from my_modules import test_module

The  __init__.py file can also decide which modules this package will export as an API,
while keeping other modules internal, by overriding the __all__ variable, like so:

__init__.py:
__all__ = ["test_module"]

===============
| Inheritance |
===============

Inheritance is simply forming new classes using classes that have already been defined.
In other words, it allows one class to take on some or even all of its attributes and methods
from a parent class. The benefits of inheritance are code reuse and reduction of complexity of
a program. The derived classes (descendants) can override or extend the functionality of base
classes (ancestors).

Implicit Inheritance
Now we want to create new (sub)classes that are able to use all of the function and properties
in the Human class but also have some of their own additional functions and properties.

General skeleton of implicit inheritance:
    class Parent(object): # inherits from the object class
      # parent methods and attributes here
    class Child(Parent): #inherits from Parent class so we define Parent as the first parameter
      # parent methods and attributes are implicitly inherited
      # child methods and attributes

=========
| Super |
=========

Sometimes in your OOP code, you will want to create updated versions of methods that are defined
in the parent class, because in addition to your custom code you want specifically to call the
parent implementation of that method as well (or instead). In these cases, you would reference
that parent object with the keyword ' super'. Specifically you reference that parent's method by
calling 'super(ChildClassName, self).parent_method()'.

Parent __init__
One thing we may want to do is call the Parent class's __init__ method, but also have our Child
class change attributes defined by its Parent class. Say that we wanted each of our sub-classes
(Wizard, Ninja, Samurai) to still inherit the attributes of the parent Human class but have more
developed attributes than the average Human.  We could do that like this:

    from human import Human
    class Wizard(Human):
        def __init__(self):
            super(Wizard, self).__init__()   # use super to call the Human __init__ method
            self.intelligence = 10           # every wizard starts off with 10 intelligence
        def heal(self):
            self.health += 10
    class Ninja(Human):
        def __init__(self):
            super(Ninja, self).__init__()    # use super to call the Human __init__ method
            self.stealth = 10                # every Ninja starts off with 10 stealth
        def steal(self):
            self.stealth += 5
    class Samurai(Human):
        def __init__(self):
            super(Samurai, self).__init__()  # use super to call the Human __init__ method
            self.strength = 10               # every Samurai starts off with 10 strength
        def sacrifice(self):
            self.health -= 5

================
| Linked Lists |
================

A Linked List is another data structure that stores values in sequential order. Sounds similar
to an array, doesn’t it? Yes, but Linked Lists have other strengths that make them more suited
for many problems. Specifically, Linked Lists are optimized for Quick Insertion and Deletion.
Linked Lists are made up of nodes - but what is a node?

A Node is an object that has a number of attributes that are stored. Only two attributes are
mandatory for an Object to be a Node: value and next. The value attribute stores exactly that,
a value such as a string or a number. The next attribute is a pointer - a reference to the
following node object -- the next kid in line. You can define a Node to have within it many
different attributes/values, or it could have very little depending on what you want to store.
In this same way, it can have a pointer named next, and maybe even another pointer named
previous (or prev).

When a Node has only next pointers, then we would call a Linked List of these nodes a
Singly Linked List. If the nodes contain both next and previous pointers, then a Linked List
of this type would be a Doubly Linked List.

The Linked List Object itself only has two attributes, the head and the tail of the Linked List.
The head is a pointer to the first node in a List. The tail is a pointer to the last node in this
List. The tail's next will always be null meaning there are no nodes following the last node in this List.

EXAMPLE CODE:
    1. Start by writing the Node Object. Each new node's next is null until we specify what it should point to.
            class Node(object):
             def __init__(self, value):
              self.value = value
              self.next = None

    2. Next, we will create the Singly Linked List Object. Each new list is empty (contains zero nodes)
       until we add them to the list.
            class SinglyLinkedList(object):
             def __init__(self):
              self.head = None
              self.tail = None

    3. Now we can run the following code…
            list = SinglyLinkedList()
            list.head = Node('Alice')
            list.head.next = Node('Chad')
            list.head.next.next = Node('Debra')

======================
| Multiple Arguments |
======================
What if you want to pass in a variable number of arguments, or want to capture multiple arguments into a
single parameter? Placing an asterisk before the name of the parameter after the "normal'' parameters does
just that. The asterisk is called a 'splat' operator.

Ex:
        def varargs(arg1, *restOfArg):
           print "restOfArg is of " + str(type(restOfArg))
        varargs("one", "two", "three")
        # OUTPUT: restOfArg is of <type 'tuple'>

Note the .join() method is called on a string that glues the values in the tuple together. For example,
the tuple of arguments ('two', 'three') was joined as 'two, three' when we called ', '.join(restofArg).

"kwargs" means "keyword arguments" (i.e. dictionary).

Ex:
        def print_keyword_args(**kwargs):
            # kwargs is a dict of the keyword args passed to the function
            for key, value in kwargs.iteritems():
                print "%s = %s" % (key, value)

====================
| Ternary Operator |
====================
Python also has a ternary operator (one line if-else statement).

In other languages:
        <condition> ? <result_if_true> : <result_if_false>
Python:
        <result_if_true> if <condition> else <result_if_false>

Ex:
        print('Coding Dojo' if stacks >= 3 else 'You are not Coding Dojo!')

===========
| Lambdas |
===========
Another type of function mentioned earlier is the anonymous function. An anonymous function is
a function without a name. In Python, anonymous functions are created with the lambda keyword.
These functions are used for various purposes:
    * handy in situations where we only need to use the function once
    * lightweight when we need to break down complex tasks into small, specific tasks
    * convenient as arguments to functions that require functions as parameters

Ex:
Earlier, we defined the square() function that takes in one parameter (num), squares it and returns it.
        def square(num):
          x = num ** 2
          return x
Now we can rewrite the function as an anonymous (lambda) function:
        adder = lambda num: num ** 2     # no return statement


**IMPORTANT: The lambda function does not include a "return" statement. LAMBDAS ALWAYS CONTAIN
AN EXPRESSION THAT IS RETURNED IMPLICITLY.

Lambda vs Def:
    * Lambdas are expressions, not statements
        - Expressions represent something like a number, string, a class instance, or a combo of values
        and operators that evaluate down to a single value.
        - Statements are sets of instructions that do not evaluate down to a value. So statements are
        pretty much anything that we would not consider an expression. For example: variable assignment,
        if statements, for loops, while loops, break statement in functions.
    * Because lambdas are expressions, they can appear where a def is not allowed.
        - element in a list
            Ex:
                # create a new list, with a lambda as an element
                my_list = ['test_string', 99, lambda x : x ** 2]
                # access the value in the list
                print my_list[2] # will print a lambda object stored in memory
                # invoke the lambda function, passing in 5 as the argument
                my_list[2](5)
        - passed to another function as a callback
            Ex:
                # define a function that takes one input that is a function
                def invoker(callback):
                    # invoke the input pass the argument 2
                    print callback(2)
                invoker(lambda x: 2 * x)
                invoker(lambda y: 5 + y)
        - stored in a variable
            Ex:
                add10 = lambda x: x + 10 # store lambda expression in a variable
                add10(2)  # returns 12
                add10(98) # returns 108
        - returned by another function
            Ex:
                def incrementor(num):
                    start = num
                    return lambda x: num + x
    * Lambda's body is a single expression, not a block of statements
    * Useful when we only need a function once. This way we don't need to define a function
        and unnecessarily consume memory and complicate our code.
        - Functions where this implementation comes into play:
            ~ map()
            ~ reduce()
            ~ sort() - lambda is optional
            ~ filter()
