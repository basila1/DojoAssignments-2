===========
| SESSION |
===========

Session is a way to store information unique to a particular client on the server side.

Session uses cookies to identify the client whose session we are interacting with.

When you want to access and modify data over multiple redirects use session.

You can use session in both your server.py file as well as your templates.

Even though you have access to the session, you should not abuse the amount of information you store in it. Store only what you need in the session.

================
| HIDDEN INPUT |
================

Example:
HTML:
<form method="post" action="/process">
      <input type="hidden" name="action" value="register">
      <input type="text" name="first_name">
      <input type="text" name="last_name">
      <input type="text" name="email">
      <input type="password" name="password">
      <input type="submit" value="Register">
 </form>
 <form method="post" action="/process">
      <input type="hidden" name="action" value="login">
      <input type="text" name="email">
      <input type="password" name="password">
      <input type="submit" value="Login">
 </form>

Flask:
if request.form['action'] == 'register':
  //do registration process
elif request.form['action'] == 'login':
  //do login process

=========================
| BASIC FORM VALIDATION |
=========================

Here's what we think are the most important concepts in form validation:
	* Logic: what data do we want to validate?
	* Checking if the data is present
	* Making sure the data is in the correct format
	* Sending the user to the correct destination whether their data is valid or not
	* Alerting the user of their errors (if they exist)

Validation Step 1 -- Conditionals
Validation Step 2 -- Flash Messages on the Server
	Flash messages are strings that exist for one redirect cycle. Similar to Session, you can access flash messages through embedded python tags {{}} & {%%} on the views and display them to the user. The difference between flash and session is that flash messages only last for one redirect while session stays until it is manually popped. This makes flash messages perfect for validations where we only need to display the error or message temporarily! To use flash messages we first need to import them from Flask.

Validation Step 3 -- Flash Messages on the Client (HTML)
	Example:
--------------------------
{% with messages = get_flashed_messages() %}
  {% if messages %}
    {% for message in messages %}
      <p>{{message}}</p>
    {% endfor %}
  {% endif %}
{% endwith %}
--------------------------
{% with messages = get_flashed_messages() %}
	The with messages here helps us declare a variable in our template that we can use within a specific scope.
{% if messages %}
	Check if there are even any messages that came back from the get_flashed_messages() function
{% for message in messages %}
	Loop through all messages
<p>{{message}}</p>
	Print the messages one by one each in a paragraph tag

============================
| ADVANCED FORM VALIDATION |
============================

Another common validation that needs to be performed is checking whether an email address is valid. You can achieve this by using something known as a regular expression or regex. Use the 'match' method that will return a boolean indicating whether the argument matches the regular expression or not. 

Regex for e-mail:
r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\.[a-zA-Z]+$'

Other Useful Validation Tools:
* str.isalpha() -- Returns a boolean that shows whether a string contains only alphabetic characters. 
* time.strptime(string, format) -- Changes a string to a time using the given format. 







